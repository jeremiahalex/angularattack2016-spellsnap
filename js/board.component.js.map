{"version":3,"sources":["board.component.ts"],"names":[],"mappings":"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","file":"board.component.js","sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {PlayerComponent} from './player.component';\nimport {MultiplayerService} from './multiplayer.service';\nimport {Player} from './player';\nimport {Word} from './word';\nimport {VALID_WORDS} from './words';\n\nconst ROW_COUNT = 36;   //TODO. these should match the server, best to pull them from their\nconst COLUMN_COUNT = 18;\nconst SCORE_PER_LETTER = 2;\nconst REMOVE_DELAY_INC = 50;//ms\nconst DOUBLE_MATCH_MULTIPLIER = 2; //bonus if end two words at once\n\nconst enum ANIMATION_STATE { Empty, Using, Used, Effecting, Removing, Removed }\n\ninterface GridCell {\n  y: number;\n  x: number;\n  starter: boolean;\n  content: string;\n  state: ANIMATION_STATE;\n  wordAcross: Word;\n  wordDown: Word;\n}\n\n@Component({\n    selector: 'game-board',\n    directives: [PlayerComponent],\n    template: `\n        <player-component [player]=\"player\"></player-component>\n        <div class=\"other-players-box\">\n            <!-- TODO. could move this into a child component if time permits -->\n            <i class=\"fa fa-users fa-2x\" aria-hidden=\"true\"> </i> \n            <div *ngFor=\"let p of otherPlayers\">\n                <div *ngIf=\"p && p.playerId != _multiplayerService.playerId\" class=\"other-player\" >\n                    {{p.currentLetter || \"?\"}}\n                </div>\n            </div>\n        </div>\n        <div class=\"instructions\" *ngIf=\"showInstructions\" (click)=\"showInstructions = false\" >\n            <div class=\"instructions-box\" >\n                <h1>Spell Snap!</h1>\n                <h2>How to Play</h2>\n                <p>Add Letters to build long words</p>\n                <p>Start new words on an <strong>*</strong></p>\n                <p>Complete words with an <strong>!</strong></p>\n                <p>Compete, Cooperate or Ignore</p>\n            </div>\n        </div>\n        <div *ngIf=\"loading\" class=\"loading-frame\">\n            <i class=\"fa fa-refresh fa-spin fa-3x fa-fw\" aria-hidden=\"true\"></i>\n        </div>\n        <section class=\"board\">\n            <div *ngFor=\"let row of gridCells\" class=\"board-row\">\n                <div *ngFor=\"let cell of row\" (click)=\"cellClicked(cell)\" [ngClass]=\"getClass(cell)\">\n                    {{getContent(cell)}}\n                </div>\n            </div>\n        </section>\n    `\n})\nexport class BoardComponent implements OnInit { \n    player : Player;\n    gridCells : GridCell[][];\n    loading : boolean; //this should prob be bound to the service\n    otherPlayers : any[];\n    showInstructions : boolean;\n    \n    constructor(private _multiplayerService: MultiplayerService) {\n        this.loading = true;\n        this.showInstructions = true;\n    }\n    \n    ngOnInit() {\n        //make a new player\n        this.player = new Player();\n        \n        this.otherPlayers = [];\n        //get grid values from the server\n        this._multiplayerService.registerCallbacks( \n            this.buildGrid.bind(this), \n            this.updateGrid.bind(this), \n            this.letterAccepted.bind(this), \n            this.letterRejected.bind(this),\n            this.playersUpdate.bind(this),\n            this.rankUpdate.bind(this), \n            this.claimAccepted.bind(this), \n            this.claimRejected.bind(this),\n            this.timeUpdated.bind(this)\n            );\n    }\n    \n    timeUpdated(timeLeft) {\n        this.player.timeLeft = timeLeft;\n    }\n    buildGrid( grid: any ) {\n        //reset the player\n        this.player.reset();\n        \n        //clear the grid\n        this.gridCells = [];\n        \n        for ( let y = 0; y < ROW_COUNT; ++y){\n            this.gridCells[y] = [];\n            for ( let x = 0; x < COLUMN_COUNT; ++x){\n                let c = grid[y][x];\n                this.gridCells[y][x] = { x: c.x, y: c.y, starter: c.starter, content: c.content, wordAcross: null, wordDown: null, state: ANIMATION_STATE.Empty };\n            }\n        }\n        this.findAllWords();\n        \n    }\n    \n    removeConnectedLetters(x,y, delay) {\n        //end if exceeds grid return\n        if ( x >= COLUMN_COUNT || y >= ROW_COUNT || x < 0 || y < 0 ) return;\n        \n        //if the cell is empty return\n        if ( !this.gridCells[y][x].content ) return;\n        \n        //else set content to zero and try all four neighbours\n        setTimeout( () => {\n            this.gridCells[y][x].state = ANIMATION_STATE.Removed;\n        }, delay);\n        this.gridCells[y][x].content = \"\"; \n        this.gridCells[y][x].state = ANIMATION_STATE.Removing;\n        \n        delay += REMOVE_DELAY_INC;\n        this.removeConnectedLetters(x+1,y, delay);\n        this.removeConnectedLetters(x-1,y, delay);\n        this.removeConnectedLetters(x,y+1, delay);\n        this.removeConnectedLetters(x,y-1, delay);\n    }\n    cleanUp() {\n        console.log(\"removed\");\n        //we need to remove each word from the array but if we encounter an exclaimation we also remove all letters that are connected to it\n        for ( let y = 0; y < ROW_COUNT; ++y){\n            for ( let x = 0; x < COLUMN_COUNT; ++x){\n                this.gridCells[y][x].wordAcross = null;\n                this.gridCells[y][x].wordDown = null;\n                if ( this.gridCells[y][x].content === \"!\") {\n                    this.removeConnectedLetters(x,y, 0);\n                }\n            }\n        }\n    }\n    //in an ideal world, we would cache this and not run it each time there is a change but the pressure of a hackathon is not ideal\n    findAllWords() {\n        //we need to delete all references to words - a better solution would not have two nested loops back to back\n        this.cleanUp();\n        \n        let words = [];  \n        //find all words that occur in the grid   \n        for ( let y = 0; y < ROW_COUNT; ++y){\n            for ( let x = 0; x < COLUMN_COUNT; ++x){\n                //if no content then move on\n                if (!this.gridCells[y][x].content) continue;\n                \n                //if not already a word across, then start making a word to the right\n                if ( !this.gridCells[y][x].wordAcross ) {\n                    this.gridCells[y][x].wordAcross = new Word(x, y, this.gridCells[y][x].content);\n                    words.push(this.gridCells[y][x].wordAcross);\n                    this.makeWord(this.gridCells[y][x].wordAcross, x+1, y);\n                }\n                \n                //if not already a word from above, then start making a word downwards\n                if ( !this.gridCells[y][x].wordDown ) {\n                    this.gridCells[y][x].wordDown = new Word(x, y, this.gridCells[y][x].content, true);\n                    words.push(this.gridCells[y][x].wordDown);\n                    this.makeWord(this.gridCells[y][x].wordDown, x, y+1, true);\n                }\n            }\n        }\n        \n        this.loading = false;\n        console.log('words found ', words);\n        \n        this._multiplayerService.sendStats(this.player.score, this.player.currentLetter);\n    }\n    \n    makeWord(word:Word, x:number, y:number, downwards:boolean = false) {\n        //end if exceeds grid return\n        if ( x >= COLUMN_COUNT || y >= ROW_COUNT ) return;\n        \n        //if the cell is empty return\n        if ( !this.gridCells[y][x].content ) return;\n       \n        //ammend word \n        word.content += this.gridCells[y][x].content; \n        \n        if ( downwards ) {\n            this.gridCells[y][x].wordDown = word;\n        } else {\n            this.gridCells[y][x].wordAcross = word;\n        }\n        \n        //check if this is a word\n        word.isWord = this.isAWord(word.content);\n        \n        //if the content is a exclaimation, mark as claimed and end search \n        if ( this.gridCells[y][x].content === \"!\" ) {\n            word.isClaimed = true;\n            return;\n        }\n        \n        //else continue on to next cell\n        if ( downwards ) {\n            this.makeWord(word, x, y+1, true);\n        } else {\n            this.makeWord(word, x+1, y);\n        }\n    }\n    \n    isAWord(word:string, full:boolean = false):boolean {\n        //TODO. need a better way to do this, that is less s l o w. Also using this function less would help\n        \n        //for now we ignore 1 letter words\n        if (word.length < 2) return false;\n        \n        for ( var i = 0; i < VALID_WORDS.length; ++i ) {\n            let w = VALID_WORDS[i];\n            //is the word too long\n            if (!w || w.length < word.length ) continue;\n            \n            //does it start correctly or end correctly\n            if (w.substr(0, word.length) !== word && w.substr(-word.length) !== word ) continue;\n           \n            //else it matches, if we're looking for a full match and it is then return true\n            if (!full) return true;\n            else if (w.length === word.length) {\n                console.log('fully valid: ', word);\n                return true;\n            }\n        };\n        console.log('not valid: ', word);\n        \n        return false; \n    }\n    \n    getContent(cell: GridCell) {\n        if ( cell.content ) return cell.content;\n        if ( cell.starter ) return \"*\";\n        return \"\";\n    }\n    \n    getClass(cell: GridCell) {\n        if ( cell.state === ANIMATION_STATE.Removing ) return \"board-cell used\";\n        if ( cell.content ) return \"board-cell used\";\n        if ( cell.starter ) return \"board-cell starter\";\n        return \"board-cell\";\n    }\n    \n    isFree(x,y):boolean {\n        if ( x >= COLUMN_COUNT || y >= ROW_COUNT ) return false;\n        \n        if ( this.gridCells[y][x].content ) return false;\n        \n        return true;\n    }\n    \n    addLetter(cell: GridCell, letter : string) {\n        console.log('adding new letter');\n        //send message to server, disable input until result\n        this.loading = true;\n        cell.state = ANIMATION_STATE.Using;\n        this._multiplayerService.addLetter(cell.x, cell.y, this.player.currentLetter);\n    }\n    letterAccepted(result:any) {\n        \n        this.gridCells[result.y][result.x].content = result.letter;\n        this.gridCells[result.y][result.x].state = ANIMATION_STATE.Used;\n        \n        this.player.score += SCORE_PER_LETTER;\n        \n        this.player.nextTurn();\n        this.findAllWords();\n    }\n    letterRejected(result:any) {\n        this.gridCells[result.y][result.x].state = ANIMATION_STATE.Empty;\n        \n        this.findAllWords();\n    }\n    updateGrid(result:any) {\n        this.gridCells[result.y][result.x].content = result.letter;\n        //To ensure cells are deleted we change them all to exclaimation marks - a bit of a hack but might actually look ok\n        if ( result.cells ) {\n            result.cells.forEach( (cell)=> {\n                this.gridCells[cell.y][cell.x].content = \"!\";\n            })\n        }\n        this.findAllWords();\n    }\n    \n    claimPoints(cell: GridCell, across:number, down:number) {\n        if ( !across && !down ) return;\n        console.log('claiming word/s - points ' + across + \" & \" + down);\n        \n        var score = across + down;\n        if ( across && down ) {\n            score *= DOUBLE_MATCH_MULTIPLIER;\n            console.log('multiplier applied: ', score); \n        }\n        \n        //logic is currently client side so we need to tell the server what cells to remove\n        var cells = [];\n        this.findEffectedCells(cells, cell.x, cell.y, true);\n        \n        console.log('cells: ', cells); \n        \n        this.loading = true;\n        cell.state = ANIMATION_STATE.Using;\n        this._multiplayerService.claimWord(cell.x, cell.y, cells, score);\n    }\n    \n    findEffectedCells(cells, x, y, first) {\n        console.log('checking: %s %s', x, y); \n        //end if exceeds grid return\n        if ( x >= COLUMN_COUNT || y >= ROW_COUNT || x < 0 || y < 0 ) return;\n        \n        //if the cell is empty return\n        if ( !first && ( !this.gridCells[y][x].content || this.gridCells[y][x].state == ANIMATION_STATE.Effecting) ) return;\n        //mark it as using to\n        this.gridCells[y][x].state = ANIMATION_STATE.Effecting;\n        \n        //else add to the list\n        cells.push({ x: x, y: y});\n        this.findEffectedCells(cells, x+1,y, false);\n        this.findEffectedCells(cells, x-1,y, false);\n        this.findEffectedCells(cells, x,y+1, false);\n        this.findEffectedCells(cells, x,y-1, false);\n    }\n    \n    claimAccepted(result:any) {\n        console.log(\"claimed \", result);\n        this.gridCells[result.y][result.x].content = \"!\";\n        this.gridCells[result.y][result.x].state = ANIMATION_STATE.Used;\n        \n        this.player.score += result.score;\n        \n        this.player.nextTurn();\n        this.findAllWords();\n    }\n    claimRejected(result:any) {\n        this.gridCells[result.y][result.x].state = ANIMATION_STATE.Empty;\n        this.findAllWords();\n    }\n    \n    playersUpdate(result:any) {\n        console.log(\"players updated: \", result);\n        this.otherPlayers = result;\n    }\n    rankUpdate(result:any) {\n        this.player.rank = result.rank;\n        console.log(\"rank updated: \", result);\n    }\n    \n    cellClicked(cell: GridCell) {\n        //All game logic is applied below... it's a bit immense. \n        console.log(`cell clicked at x: ${cell.x}, y: ${cell.x}. Content is: ${cell.content}`);\n        console.log('grid ', this.gridCells );\n        \n        if ( this.loading ) return;\n        \n        //if player can't play then then move is forbidden\n        if ( !this.player.ready ) return;\n        console.log('player is ready');\n         \n        //if cell is used then move is forbidden\n        if ( cell.content ) return;\n        console.log('cell is free');\n        \n        //if it is a exclaimation then we handle it differently as it must end a valid word or two - though rare, both are possible together\n        if ( this.player.currentLetter === \"!\" ) {\n            console.log('is exclaimation');\n            let claimAcross = 0;\n            let claimDown = 0;\n            if ( cell.x > 0 && this.gridCells[cell.y][cell.x-1].wordAcross ) {\n                //attempt to finish a word across\n                if ( !this.gridCells[cell.y][cell.x-1].wordAcross.isClaimed && this.isAWord(this.gridCells[cell.y][cell.x-1].wordAcross.content, true) ) {\n                    //then this word can be claimed\n                    console.log('claim across');\n                    claimAcross = this.gridCells[cell.y][cell.x-1].wordAcross.points();\n                }\n            }\n            \n            if ( cell.y > 0 && this.gridCells[cell.y-1][cell.x].wordDown ) {\n                //attempt to finish a word down\n                if ( !this.gridCells[cell.y-1][cell.x].wordDown.isClaimed && this.isAWord(this.gridCells[cell.y-1][cell.x].wordDown.content, true) ) {\n                    //then this word can be claimed\n                    console.log('claim down');\n                    claimDown = this.gridCells[cell.y-1][cell.x].wordDown.points();\n                } else {\n                    //invalidates the word across as well\n                    claimAcross = 0;\n                }\n            }\n            \n            this.claimPoints( cell, claimAcross, claimDown );\n            \n            return;\n        }\n        console.log('exclaimation assessed');\n        \n        //if it is not a starter cell but yet it has no neighbours, then the move is forbidden\n        if ( !cell.starter && this.isFree(cell.x + 1, cell.y) && this.isFree(cell.x - 1, cell.y) && this.isFree(cell.x, cell.y + 1) && this.isFree(cell.x, cell.y - 1) ) return;\n        console.log('neighbourhood is ok ');\n        //TODO. could be made smarter for starter cells, to check that the letter could actually make a word based on its surrounding\n        \n        //if this would end a word and word is claimed or would be made invalid, then move is forbidden\n        if ( cell.x > 0 && this.gridCells[cell.y][cell.x-1].wordAcross && ( this.gridCells[cell.y][cell.x-1].wordAcross.isClaimed || !this.isAWord(this.gridCells[cell.y][cell.x-1].wordAcross.content + this.player.currentLetter ) ) ) return;\n        console.log('ending word across assessed');\n        if ( cell.y > 0 && this.gridCells[cell.y-1][cell.x].wordDown && ( this.gridCells[cell.y-1][cell.x].wordDown.isClaimed || !this.isAWord(this.gridCells[cell.y-1][cell.x].wordDown.content + this.player.currentLetter ) ) ) return;\n        console.log('ending word down assessed');\n        \n        //if this would start a word and word is claimed or would be made invalid, then move is forbidden\n        if ( (cell.x < COLUMN_COUNT-1) && this.gridCells[cell.y][cell.x+1].wordAcross && ( this.gridCells[cell.y][cell.x+1].wordAcross.isClaimed || !this.isAWord(this.player.currentLetter + this.gridCells[cell.y][cell.x+1].wordAcross.content) ) ) return;\n        console.log('starting word across assessed');\n        if ( (cell.y < ROW_COUNT-1) && this.gridCells[cell.y+1][cell.x].wordDown && ( this.gridCells[cell.y+1][cell.x].wordDown.isClaimed || !this.isAWord(this.player.currentLetter + this.gridCells[cell.y+1][cell.x].wordDown.content) ) ) return;\n        console.log('starting word down assessed');\n        \n        //if this would connect two words and either is claimed or the combination would be made invalid, then move is forbidden\n        if ( cell.x > 0 && (cell.x < COLUMN_COUNT-1) \n            && this.gridCells[cell.y][cell.x-1].wordAcross && this.gridCells[cell.y][cell.x+1].wordAcross\n            && ( this.gridCells[cell.y][cell.x-1].wordAcross.isClaimed || this.gridCells[cell.y][cell.x+1].wordAcross.isClaimed \n            || !this.isAWord(this.gridCells[cell.y][cell.x-1].wordAcross.content + this.player.currentLetter + this.gridCells[cell.y][cell.x+1].wordAcross.content ) ) ) return;\n        \n        console.log('connecting words across assessed');\n        \n        if ( cell.y > 0 && (cell.y < ROW_COUNT-1) \n            && this.gridCells[cell.y-1][cell.x].wordDown && this.gridCells[cell.y+1][cell.x].wordDown\n            && ( this.gridCells[cell.y-1][cell.x].wordDown.isClaimed || this.gridCells[cell.y+1][cell.x].wordDown.isClaimed \n            || !this.isAWord(this.gridCells[cell.y-1][cell.x].wordDown.content + this.player.currentLetter + this.gridCells[cell.y+1][cell.x].wordDown.content ) ) ) return;\n        \n        console.log('connecting words downs assessed');\n        \n        // else add content\n        this.addLetter(cell, this.player.currentLetter);\n    }\n    \n}"],"sourceRoot":"/source/"}